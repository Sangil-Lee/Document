ubuntu 16.04.3 LTS
vivado 2016.4
petalinux 2016.4

===================================================================================
@xx. 


L:\ibs.raonTs2\plx_raonTs2_1v20\build\tmp\sysroots\plnx_arm\etc\skel


===================================================================================
@xx. 많이 쓰는 리눅스 명령

- 파일 찾기
find [folder] -name 'file name'
find ./ -name aaa.txt           //현재폴더 및 하부 폴더

- 파일 내용 검색
grep -r "" ./*

- interrupt 상태 확인
cat /proc/interrupts





===================================================================================
@xx. vmware Tools 설치


Ubuntu or Ubuntu Server with a graphical user interface
To mount the CD image and extract the contents:
Power on the virtual machine.
Log in to the virtual machine using an account with administrator or root privileges.
Select:

For Fusion: Virtual Machine 에서 오른 클릭  > reinstall VMware Tools.

Note: If you are running the light version of Fusion, a version of Workstation without VMware Tools, or VMware Player, you are prompted to download VMware Tools before they can be installed. Click Download Now to begin the download.
 
Open the VMware Tools CD mounted on the Ubuntu desktop.
Right-click the file name that is similar to VMwareTools.x.x.x-xxxx.tar.gz, click Extract to, and select Ubuntu Desktop to save the extracted contents.

The vmware-tools-distrib folder is extracted to the Ubuntu Desktop.
To install VMware Tools in Ubuntu:
Open a Terminal window. For more information, see Opening a command or shell prompt (1003892).
In the Terminal, run this command to navigate to the vmware-tools-distrib folder:

cd Desktop/vmware-tools-distrib
 
Run this command to install VMware Tools:

sudo ./vmware-install.pl -d

Note: The -d switch assumes that you want to accept the defaults. If you do not use -d, press Return to accept the defaults or supply your own answers.
 
Enter your Ubuntu password.
Restart the Ubuntu virtual machine after the VMware Tools installation completes.

ls

===================================================================================
@xx. Ubuntu 기본 프로그램 설치
- vim 설치
  sudo apt-get install vim
  
- ssh 설치
  sudo apt-get install ssh


- chrome 설치
  sudo dpkg -i google-chrome-stable_current_amd64.deb
  sudo apt-get -f install
  
  
  
- 한글 입력 :  http://techlog.gurucat.net/288
  sudo add-apt-repository ppa:createsc/3beol
  sudo apt-get update
  sudo apt-get install ibus 
  sudo apt-get install ibus-hangul
  
  
  
  
- visual studio code app [편집기]설치
  설치 설명 페이지 :
    https://code.visualstudio.com/docs/setup/linux
  .deb file download page :
    https://code.visualstudio.com/Download
    
    방법 1.
      설치는 다운로드 된 파일을 탐색기에서 더블클릭했음. install 버튼 클릭 하면 자동 설치 됨
      code_1.18.1-1510857349_amd64.deb
    
    방법 2.
      sudo dpkg -i <file>.deb
  
  
  빌드 설정 관련 참고 페이지
    http://psj8252.ml/221111026448


- git 설치
  sudo apt-get install git -y

- vim 설치  
  sudo apt-get install vim -y
  
  

- 노트북 그래픽 카드 설치
  --> 실패 (너무 복잡하고 설명이 정확히 이해 안감.)
-끝-
  
  
  





===================================================================================
@xx. petalinux 필요 프로그램 tftp 서버 설치

sudo apt-get install tftp
sudo apt-get install tftpd-hpa -y
sudo mkdir /tftpboot
sudo chown -R ctrluser:ctrluser /tftpboot
 
설정파일 수정

sudo vim /etc/default/tftpd-hpa
cat /etc/default/tftpd-hpa

# /etc/default/tftpd-hpa
TFTP_USERNAME="tftp"
TFTP_DIRECTORY="/tftpboot"
TFTP_ADDRESS="0.0.0.0:69"
TFTP_OPTIONS="--secure"
 
설정 내용 적용
sudo service tftpd-hpa restart
 


===================================================================================
@xx. cross compile 환경 구축
  windows10         samba 공유[vivado 프로젝트 폴더를 리눅스와 공유하기 위해]
  ubuntu            nfs   서버 구축[개발 시 petalinux 빌드이미지(커널 및 앱)을 타겟에서 쉽게 접근하도록]
                    tftp  서버 구축[타겟의 uboot 가 네트웍으로 image.ub 파일을 읽어서 부팅 할 수 있도록]
                          "petalinux 필요 프로그램들 설치" 에 포함 되어 있음.
  target(petalinux) ftp   서버 구축[윈도우 or 우분투에서 sd card 에 파일을 전송할 수 있도록]

  windows10   <--[smb]--   ubuntu   <--[nfs]--   target[ftp server]

sudo mount -t cifs //192.168.0.85/git ~/mnt/lay85 -o username=laykim,password=

===================================================================================
@xx. ubuntu 에 nfs 서버 구축하기
참고: http://darksoulstory.tistory.com/9

sudo apt-get install nfs-common -y
sudo apt-get install nfs-kernel-server -y 
sudo apt-get install portmap -y

- NFS에 사용될 디렉토리 생성 및 권한 부여
/tftpboot 폴더를 nfs 폴더로 사용
                                 //root# sudo mkdir /tftpboot
                                 //root# sudo chown -R laykim:laykim /tftpboot
                                 //root# sudo chmod 777 /tftpboot

- NFS 설정 파일 변경 (서버)
root# sudo vim /etc/exports

/etc/exports 파일에서 마지막 부분에 아래 내용 추가
/tftpboot *(rw,no_root_squash,async)

형식 : [/공유 디렉터리] [접근 IP] [옵션] 
* 부분에 특정 IP만 등록 가능

[옵션]
ro 파일 시스템을 읽기전용으로 마운트 
rw 파일시스템을 읽기/쓰기 로 마운트
no_root_squash  : NFS 서버와 NFS 클라이언트의 root 사용자를 같도록 설정
no_all_squash   : root 이외 모든 사용자에 대해 똑같은 UID를 가진 사용자는 모두 동일한 권한을 줌
                       (모든 UID - nobody) : 기본값
sync : NFS 서버와 클라이언트 사이에 SYNC를 맞춤
insecure : 인증되지 않은 액세스도 가능
link_relative : 서버에 있는 루트와의 링크를 포함하는 디렉토리에서 얻는 "../" 만큼 링크 앞에 두어 절대 심볼릭 링크를 상대 심볼릭 링크로 바꿀때 사용

- NFS 커널 서버 및 NFS 포트맵 재 시작
root# sudo /etc/init.d/nfs-kernel-server restart
// root# sudo /etc/init.d/portmap restart -> rpcbind로 바뀜
root# sudo /etc/init.d/rpcbind restart

- NFS 클라이언트 설정
* 마운트하여 사용할 디렉토리 생성
root# sudo mkdir /mnt/nfs
root# sudo chown laykim:laykim /mnt/nfs

* NFS 서버 마운트
형식 : root# mount -t nfs [호스트명 또는 IP]:[/NFS 서버에서 설정한 공유 디렉터리] [/마운트 포인트]
root# sudo mount -o nolock 192.168.0.140:/tftpboot /mnt/nfs
root# sudo umount /mnt/nfs

mount -o nolock 192.168.0.140:/tftpboot /usr/local/epics
mount /dev/mmcblk0p1 /usr/local/epics
umount /usr/local/epics

mount -o nolock 192.168.0.140:/tftpboot /home/ctrluser

mkdir /home/ctrluser
mkdir /home/ctrluser/epics

mount -o nolock 192.168.0.140:/home/ctrluser/epics /home/ctrluser/epics

//root# mount -t nfs -o nolock 192.168.0.86:/tftpboot /mnt/nfs

===================================================================================
@xx. ubuntu 에 samba 서버 구축하기

그냥 파일탐색기에서 공유 하면 윈도우에서 접근 가능

sudo apt-get install system-config-samba
sudo system-config-samba


sudo apt-get install samba
sudo /etc/init.d/smbd restart
sudo /etc/init.d/smbd start
sudo /etc/init.d/smbd stop



===================================================================================
@xx. petalinux 필요 프로그램들 설치
ug1144-petalinux-tools-reference-guide.pdf //Installation Requirements 참조

아래 스크립트 수행하면 자동 설치 됨.
install_ptlxComponent_2016.4.sh


*설치 안되는 패키지는 그냥 스킵 했음 
sudo apt-get install python -y    
sudo apt-get install tofrodos -y
sudo apt-get install iproute2 -y
sudo apt-get install gawk -y
sudo apt-get install xvfb -y
sudo apt-get install gcc -y
sudo apt-get install make -y
sudo apt-get install net-tools -y
sudo apt-get install libncurses5-dev -y
sudo apt-get install tftpd -y
sudo apt-get install zlib1g-dev -y
sudo apt-get install libssl-dev -y
sudo apt-get install flex -y
sudo apt-get install bison -y
sudo apt-get install libselinux1 -y
sudo apt-get install gpg -y
sudo apt-get install wget -y
sudo apt-get install diffstat -y
sudo apt-get install chrpath -y
sudo apt-get install socat -y
sudo apt-get install xterm -y
sudo apt-get install autoconf -y
sudo apt-get install libtool -y
sudo apt-get install tar -y
sudo apt-get install unzip -y
sudo apt-get install texinfo -y
sudo apt-get install zlib1g-dev -y
sudo apt-get install gcc-multilib -y
sudo apt-get install build-essential -y
sudo apt-get install libsdl1.2-dev -y
sudo apt-get install libglib2.0-dev -y
sudo apt-get install zlib1g:i386 -y
sudo apt-get install vim -y

sudo apt-get install subversion -y




===================================================================================
@xx. petalinux 설치

vmware 용량을 200GB로 할 것.
!!! 하드디스크 여유 용량 100GB 필요 !!!
리눅스 하드디스크 용량 확인 명령

laykim@ubuntu:~$ df
df: /mnt/hgfs: Protocol error
Filesystem     1K-blocks    Used Available Use% Mounted on
udev             1981712       0   1981712   0% /dev
tmpfs             401596    6384    395212   2% /run
/dev/sda1      181521712 6258572 166019340   4% /
tmpfs            2007964   13652   1994312   1% /dev/shm
tmpfs               5120       4      5116   1% /run/lock
tmpfs            2007964       0   2007964   0% /sys/fs/cgroup
tmpfs             401596      60    401536   1% /run/user/1000
laykim@ubuntu:~$ 


윈도우 PC에 접속 해서 설치 (파일브라우저에서 "connect to server")
smb://192.168.0.85

sudo mkdir /opt/pkg
sudo mkdir /opt/pkg/petalinux20164
sudo chown -R ctrluser:ctrluser /opt/pkg

!! 설치는 sudo 로 하면 안 됨 !!
./petalinux-v2016.4-final-installer.run /opt/pkg/petalinux20164


설치 완료 후 ----------->
cd /opt/pkg/petalinux20164/
laykim@ubuntu:/opt/pkg/petalinux20164$ chmod 777 settings.sh 
laykim@ubuntu:/opt/pkg/petalinux20164$ source ./settings.sh 
PetaLinux environment set to '/opt/pkg/petalinux20164'
WARNING: /bin/sh is not bash! 
bash is PetaLinux recommended shell. Please set your default shell to bash.
INFO: Checking free disk space
INFO: Checking installed tools
INFO: Checking installed development libraries
INFO: Checking network and other services



$PETALINUX do not work!	(https://ubuntuforums.org/showthread.php?t=1932504)
sudo rm /bin/sh
sudo ln -s /bin/bash /bin/sh
sudo rm /bin/sh
sudo ln -s /bin/dash /bin/sh
source /opt/pkg/petalinux/settings.sh
$PETALINUX 환경 변수 export 되었는지 확인

WARNING: /bin/sh is not bash! ---> 메시지 원인 :/bin/sh 의 링크가 dash로 되어 있어서 그렇다고 함??
--  This is what worked for me. First make sure your SHELL is /bin/bash by ysing this command.
    chsh -s /bin/bash
    You will have to log out and log back in, then you can then check it by typing "echo $SHELL". Then make /bin/sh link to /bin/bash:
    sudo rm /bin/sh
    sudo ln -s /bin/bash /bin/sh


/etc/profile 열어서 맨아래 줄에 아래 추가 [petalinux 개발환경 설정 - 우분투 시작시 자동 적용]
sudo vim /etc/profile
  
  source /opt/pkg/petalinux20164/settings.sh /opt/pkg/petalinux20164
  




===================================================================================
@xx. 타겟에서 sdcard mount 하기
root# mount /dev/mmcblk0p1 /mnt/sdcard








 petalinux-create -t apps --template install --name epicslib --enable
 petalinux-build -c epicslib -x do_install
 
===================================================================================
@xx. petalinux project 생성 및 cross compile 절차

$ petalinux-create --type project --template zynq --name zq900

- top.hdf 파일을 raonTs2_1v30 폴더로 복사
- 스크립트 파일들 raonTs2_1v30 폴더로 복사

$ cd raonTs2_1v30
$ petalinux-config --get-hw-description=./

- system configration 창으로 전환 됨 - 그냥 exit

- 완료 후
$ ./cpc.sh


$ ./plcrf.sh
    Filesystem Packages -> libs -> libgcc-xilinx -> libgcc   --> check
    Filesystem Packages -> misc -> gcc-runtime-xilinx -> libstdc++ --> check


** image.ub 에서 sysinit 만 올리고 모듈은 insmod 로 sdcard에서 올린다.

$ petalinux-create -t apps --name sysinit --enable

- sysinit.sh, sysman.sh 파일 카피 및 sysinit.bb 파일 수정

  petalinux-build -c sysinit -x do_install
  //petalinux-build -c sysinit -x do_clean

$ petalinux-create -t modules --name ts2ip --enable
  petalinux-build -c ts2ip -x do_compile
  cp -f ./build/tmp/work/plnx_zynq7-xilinx-linux-gnueabi/ts2ip/1.0-r0/ts2ip.ko /tftpboot
  //petalinux-build -c ts2ip -x do_clean

$ ./plcrf.sh
  gtp, evsys, evg, evr 모듈 체크 해제.


$ ./plb.sh






//image.ub 만들기
petalinux-build -x package
./cpb.sh


//BOOT.BIN 만들기
petalinux-package --boot --fsbl ./images/linux/zynq_fsbl.elf --fpga ./images/linux/system.bit --u-boot --force







#copy root file system to /petalinux/components/ext_sources
#rt-patch
      ./components/ext_sources/xlnx_4.6.0_RT 폴더에서 아래 명령 수행
      zcat ../patch-4.6-rc7-rt1.patch.gz | patch -p1
      
      petalinux-config
      ${TOPDIR}/../components/ext_sources/xlnx_4.6.0_RT
      --> 99%에서 엄청 오랜 시간이 걸림 약 5분?

#copy custom sh files

./cpc.sh
./pli.sh

#copy meta user source files
  !! module은 COPYING 파일은 카피 하면 안됨
  
./plb.sh


petalinux-config -c rootfs
petalinux-config -c kernel
  petalinux-config -c kernel 에러 발생 시 아래 패키지 설치
  sudo apt-get install screen //<---------- 
petalinux-config -c fsbl



git 폴더 만들기
  ~/ 에서
  mkdir git
  git clone drserver.local:/volume1/git/_laykim.git ~/git/ 

*.hdf 위치
  ~/git/ibs.raonTs2/fpga/raonTs2_1v.sdk

petalinux 프로젝트 위치 
  ~/git/ibs.raonTs2/petalinux/
      

1. Create New Project
  $ petalinux-create --type project --template <CPU_TYPE> --name <PROJECT_NAME>

  ~/git/ibs.raonTs2/1v00/ 에서
  petalinux-create --type project --template zynq --name plx_raonTs2_1v20
  
  ~/git/ibs.raonTs2/petalinux 폴더 생성 됨 (이하 $LAY_PTLX)

2. Steps to Import Hardware Configuration
  
  방법 1.
    $LAY_PTLX 에서 // petalinux-config --get-hw-description=$
    
    petalinux-config --get-hw-description=../fpga/raonTs2_1v.sdk/
    
  방법 2.
    sudo mount -t cifs //192.168.0.85/svnFPGA /mnt/smb -o username=laykim
    petalinux-config --get-hw-description=/mnt/smb/P_IBS_2017_RAON_TS2/raonTs2_1v/raonTs2_1v.sdk/
    sudo umount /mnt/smb
    
    sudo mount -t cifs //192.168.0.85/Xilinx /mnt/lay85 -o username=laykim
    
  
  ===========================================================================================
  *ps yocto 컴파일 환경 optimize
    아래 링크에서 sstate cache file 다운로드 (약 15.6GB) 하여 /opt/pkg/petalinux20164_sstate 폴더에 압축 풀어 넣을 것. - 빌드 속도 증가
      https://www.xilinx.com/member/forms/download/xef.html?filename=sstate-rel-v2016.4.tar.gz&akdm=1

    .conf 파일은 petalinux-config 설정 후 자동 생성 되므로 이후 수동으로 아래 구문을 고쳐줘야...?
      {$LAY_PTLX}/build/conf/plnxtool.conf 파일 수정 - 수동으로
        # SSTATE_MIRRORS_append 대체 - https://www.author.xilinx.com/ 링크가 없어져서..  
        SSTATE_MIRRORS_append = "  /
        file://.* file:///opt/pkg/petalinux20164_sstate/arm/sstate-cache/PATH;downloadfilename=PATH /n /
        "
        # BB_NUMBER_THREADS 환경 변수 추가 - 컴파일 시 코어를 더 할당
        BB_NUMBER_THREADS = "8"  

      {$LAY_PTLX}/build/conf/local.conf 파일 수정 - 수동으로
        #SOURCE_MIRROR_URL ?= "https://www.author.xilinx.com/sswreleases/rel-v2016.4/downloads"    ---> 본 링크가 사라졌음 build 시 시간 오래 걸리는 요인 - 주석 처리 할 것
        SOURCE_MIRROR_URL ?= "file:///opt/pkg/petalinux20164_sstate/downloads"
        

3. Build System Image
  $LAY_PTLX 에서
  
  petalinux-config
  petalinux-build

4. Generate uImage
  $LAY_PTLX 에서
  petalinux-package --image -c kernel --format uImage

  *실제 rootfs 생성 위치
  {$LAY_PTLX}/build/tmp/work/plnx_arm-xilinx-linux-gnueabi/petalinux-user-image/

5. Generate Boot Image
  petalinux-package --boot --fsbl <FSBL image> --fpga <FPGA.bit> --u-boot
  petalinux-package --boot --fsbl ./zynq_fsbl.elf --fpga ./top.bit --u-boot --force

6. user app or module build
  ------- create --------
  petalinux-create -t apps --name testApp --enable
  petalinux-create -t apps --name epics-libset --enable
  petalinux-create -t modules --name raon-gtpcore --enable
  petalinux-create -t modules --name xadc
  
  !!! project-spec/meta-user 폴더에 프로젝트 생성 됨.

  ------- build --------
  petalinux-build -c testApp -x do_compile
  petalinux-build -c epics-libset -x do_compile
  petalinux-build -c raon-gtpcore -x do_compile
  petalinux-build -c xadc -x do_compile
  
  ------- copy to nfs folder --------
  cp -f ./build/tmp/work/cortexa9hf-neon-xilinx-linux-gnueabi/myapp/1.0-r0/myapp /tftpboot
  cp -f ./build/tmp/work/plnx_arm-xilinx-linux-gnueabi/raon-gtpcore/1.0-r0/raon-gtpcore.ko /tftpboot
  
  ------- clean --------
  petalinux-build -c myapp -x do_clean
  petalinux-build -c raon-gtpcore -x do_clean
  petalinux-build -c epics-libset -x do_clean
  



  + will rebuild the system image including the selected user application myapp
  petalinux-build
  
  + To build myapp into an existing system image:
  petalinux-build -c rootfs -x do_gen_sysroot      --- at least once before you build the application[한번만 하면 되는..]
  petalinux-build -c myapp
  petalinux-build -x package

  + To clean the selected user application:
  petalinux-build -c myapp -x do_clean

  + To rebuild the selected user application:
  petalinux-build -c myapp -x build

  + To install the selected user application:
  petalinux-build -c rootfs/myapp -x do_install
  <plnx-proj-root>/build/tmp/work/{MACHINE}-linux-gnueabi/petalinux-user-image/1.0-r0/rootfs/.    <-- 위치

  -------------------------------------------------------------------------
  + To build mymodule & into an existing system image
  petalinux-build -c ts2ev
  petalinux-build -x package
  
  + To clean mymodule
  petalinux-build -c mymodule -x do_clean
  
  + To rebuild mymodule
  petalinux-build -c mymodule -x do_build

  + To install mymodule
  petalinux-build -c mymodule -x do_install




  아래 에러 발생 시 [우분투에 파일 관리 개수 리밋이 있는 듯?]
    WatchManagerError: add_watch: cannot watch /home/laykim/svnPetalinux/raonTs2_1v/build/conf WD=-1, Errno=No space left on device (ENOSPC)
    --> 
      sudo vim /etc/sysctl.conf
        fs.inotify.max_user_watches = 1048576   <-- 추가 후 저장
      sudo sysctl -p /etc/sysctl.conf

petalinux-config -c rootfs
petalinux-config -c kernel



===================================================================================
@xx. device tree 정보 
  components/plnx_workspace/device-tree-generation/pl.dtsi
  
  	raon_ems_gtpcore_0: raon_ems_gtpcore@43c10000 {
			compatible = "xlnx,raon-ems-gtpcore-1.0";          <=====================================
			interrupt-parent = <&intc>;
			interrupts = <0 29 4>;
			reg = <0x43c10000 0x10000>;
			xlnx,s00-axi-addr-width = <0x10>;
			xlnx,s00-axi-data-width = <0x20>;
		};

===================================================================================
@xx. git 사용법

#참고 url
https://backlog.com/git-tutorial/kr/intro/intro1_1.html

#git 서버의 특정 폴더 pull
git init gitDR
cd gitDR
git config core.sparseCheckout true
git remote add -f origin 192.168.0.20:/volume1/git/_laykim
echo "ibs.raonTs2" >> .git/info/sparse-checkout 
echo "_petalinuxData" >> .git/info/sparse-checkout 
git pull origin master
git branch --set-upstream-to=origin/master master
  

#git ibs 서버 clone
git clone http://210.125.43.151:30000/Timing/TimingSystem.git gitIbs

#git branch for rt-patch
git checkout -b ibs.raonTs2_RT

#git branch 삭제하기
git branch -d ibs.raonTs2_RT

git checkout -b origin master


===================================================================================
@xx. petalinux rt-patch 

참고사이트
https://wiki.trenz-electronic.de/display/PD/How+to+install+the+linux-rt+%28Real-Time%29+patch

  커널 소스를 다운로드 한다.
  
      방법 1. 아래 사이트에서 최신버전을 받는다?
        https://github.com/Xilinx/linux-xlnx
        ./components/ext_sources/xlnx_x.x.x 폴더에 복사
        
      방법 2. 일단   petalinux-create, petalinux-config --get-hw-description=../fpga/raonTs2_1v.sdk/, petalinux-config,  petalinux-build 후에 
        ./build/tmp/work-shared/plnx_arm/kernel-source 에 커널 소스이며 이를 tar 압축하여 ./components/ext_sources/ 로 카피하고
        ./components/ext_sources/xlnx_4.6.0 폴더에 푼다.
        
  rt patch 파일을 다운로드 한다.
      대상 버전  : 
      
      https://www.kernel.org/pub/linux/kernel/projects/rt/4.6/
      !! 커널의 버전과 일치하는 버전을 받아야 함.
      
      patch-4.6-rc7-rt1.patch.gz 를 아래 폴더로 카피  
      ./components/ext_sources/ 
      
      ./components/ext_sources/xlnx_4.6.0 폴더 이름을 아래와 같이 변경하거나 하나 더 카피해서 만들거나..
      ./components/ext_sources/xlnx_4.6.0_RT
      
      ./components/ext_sources/xlnx_4.6.0_RT 폴더에서 아래 명령 수행
      zcat ../patch-4.6-rc7-rt1.patch.gz | patch -p1
      
      petalinux-config
      ${TOPDIR}/../components/ext_sources/xlnx_4.6.0_RT
      
      
  petalinux-config 에서 커널소스의 위치를 변경한다.
      참고 : ug1144-petalinux-tools-reference-guide.pdf  UG1144 (v2016.4) December 14, 2016
      Using External Kernel and U-boot With PetaLinux
      
      1. Copy the kernel source directory to
          <plnx-proj-root>/components/ext_sources/<MY-KERNEL>
      2. Copy the u-boot source directory to
          <plnx-proj-root>/components/ext_sources/<MY-U-BOOT>
      3. Run petalinux-config, and go into "linux Components Selection --->" sub-menu,
      ° For kernel, select "linux-kernel () --->" and then select ext-local-src
           ( ) linux-xlnx
           (X) ext-local-src
           ( ) remote
      ° For U-boot, select " u-boot () --->” and then select ext-local-src
           ( ) u-boot-plnx
           ( ) remote
           (X) ext-local-src
      4. For kernel, select "External linux-kernel local source settings ---> "
      5. Enter the path:
          ${TOPDIR}/../components/ext_sources/xlnx_4.6.0_RT
      6. For uboot, select "External u-boot local source settings --->”. Enter the path:
          ${TOPDIR}/../components/ext_sources/<MY-U-BOOT>
          ${TOPDIR} --> is the yocto variable pointing to <plnx-proj-root>/build directory
          
      You can give an absolute path for the source, but you must make sure you change the path
      while using the BSP with the source. It is your responsibility to change the source path. The
      sources can be placed outside the project as well.
      
  petalinux-build 수행
  
  빌드 후 타겟에서 
  root@plnx_arm:/mnt/nfs# uname -r
  4.6.0-rt1-xilinx                        <========== 이렇게 나오면 성공
  
  -끝-
  
  
  
  
===================================================================================
@xx. petalinux EPICS 빌드
  svn checkout svn://192.168.0.20/_laykim/trunk/project/P_IBS_2017_RAON_TS2
  
  
  
  
  
  